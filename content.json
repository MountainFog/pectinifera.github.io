{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"John Doe","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"2018-4-3","slug":"2018-4-3","date":"2018-04-09T09:07:02.000Z","updated":"2018-04-09T11:27:59.702Z","comments":true,"path":"2018/04/09/2018-4-3/","link":"","permalink":"http://yoursite.com/2018/04/09/2018-4-3/","excerpt":"","text":"4-3知识总结·循环方式 for循环常用。 if…else… switch,是严格区分数据类型的，不会隐式转换。一般习惯在枚举的时候使用switch，而且代码逻辑清晰，更容易添加新的枚举类型。 1234567891011switch(age)&#123; case 10: alert(&apos;您的年龄为10岁！&apos;); break; case 20: alert(&apos;您的年龄为20岁！&apos;); break; default: alert(&apos;您的年龄未知！&apos;); break; &#125; 自增自减 a++先使用后++。 ++a则是先++后使用。 a 123var b = ++a;console.log(&apos;a===&gt;&apos;+a);console.log(&apos;b===&gt;&apos;+b); while循环 while循环必须有结束条件，否则就是死循环。 个别情况下需要死循环。 age 12345while(age&lt;20)&#123;console.log(&apos;我还是个孩子！我的年龄是:&apos;+age);age++;&#125;console.log(&apos;程序结束！&apos;); do…while…具有优先计算，后考虑结束条件的特性。 for循环 可以使用for(var i = 0 ; i &lt; 100 ; i++){ if(i == 50){ } }来限制循环次数。 也可以使用for(var i = 0 ; i &lt; 100 ; i++){ if(){ continue}； if(){ alert}； }嵌套if附加筛选条件。 九九乘法表1234567891011for(var i = 1 ; i &lt;= 9 ; i ++)&#123; for(var j = 1 ; j &lt;= 9 ; j++)&#123; if(j&gt;i)&#123; break; &#125; document.write(j +&apos; * &apos;+ i + &apos;=&apos; + j*i); document.write(&apos;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&apos;); &#125; document.write(&apos;&lt;br&gt;&apos;);&#125; 数组 数组是用于保存一类数据的集合。 创建数组：Array是一个数组对象，提供数组的增删改查方法，通过new关键词创建一个实例对象。 heightArr 1234567以上为创建数组，未参与程序运行。var arr = new Array(); var arr2 = []; arr2[0] = 1; arr2[1] = 2; console.log(arr2); console.log(arr2[1]); 数组的遍历 数组遍历举例： arr 1234for(var a in arr)&#123; console.log(&apos;a==&gt;&apos;+a); console.log(&apos;值==&gt;&apos;+arr[a]); &#125; 数组的常用方法 数组里面的数据可以是任意类型，但是一般是用一种类型。 arr1 12345678910111213141516var arr2 = [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;];1.用concat合并数组。var arr3 = arr1.concat(arr2);console.log(arr1); 1,3,5console.log(arr2); a,b,cconsole.log(arr3); 1,3,5,a,b,c2.用join把数组分为字符串，join可以有参数。var str = arr2.join(&apos;-&apos;); console.log(str); a-b-c3.把字符串变为数组。var arr4 = str.split(&apos;-&apos;); console.log(arr4); &quot;a&quot;,&apos;b&apos;,&apos;c&apos;4.把字符串用空格打断。var str2 = &apos;i am fine today!&apos;;var arr5 = str2.split(&apos; &apos;);console.log(arr5); &quot;i&quot; &quot;am&quot; &quot;fine&quot; &quot;today!&quot;&quot; 增加数组。 arr1 123456arr1[4] = 10;1.往后面添加数组。arr1.push(11);2.往前面添加数组。arr1.unshift(9);console.log(arr1);==&gt; 9,1,3,6,7,11 删除数组。 arr 12345671.删除最后一个值，并返回。var rs = arr.pop();console.log(rs);==&gt;20;2.删除第一个值，并返回。var rs2 = arr.shift();console.log(rs2);==&gt;2;console.log(arr);==&gt;3,6,18; 删除某一位。 arr 123splice：从下表为2的值开始，删除3个。arr.splice(2,3);console.log(arr);==&gt;1,3,8,11; 冒泡排序 原理：1.相邻的两位比较，如果顺序不对，则交换位置。2.每一轮比较完毕后，会得到一个最大值或最小值。3.继续前面的操作，知道没有可比的值结束。 12345678910var arr = [10,9,4,5,3];for(var i = 0 ; i &lt; arr.length ; i++)&#123; if(arr[i]&gt;arr[i+1])&#123; var temp = arr[i]; arr[i] = arr[i+1]; arr[i+1] = temp; &#125;&#125;console.log(arr);重复以上步骤... 冒泡排序改进： arr 12345678910111213141516比较的次数↓for(var i = 0 ; i &lt; arr.length-1; i++)&#123; 比较每一次的结果↓ for(var j = 0 ; j &lt; arr.length-i; j++)&#123; 比较相邻的元素从小到大排列↓ if(arr[j]&gt;arr[j+1])&#123; 交换位置↓ var temp = arr[j]; arr[j] = arr[j+1]; arr[j+1] = temp; &#125; &#125; console.log(arr); &#125; console.log(&apos;end=======&apos;); console.log(arr); 选择排序arr 123456789101112131415161718192021默认最小值下标var minIndex = 0 ;比较的轮数for(var i = 0 ; i &lt; arr.length-1;i++)&#123; minIndex = i;一个跟一个比 比完一轮 拿出最小值的下标.for(var j = i+1 ; j &lt; arr.length; j++)&#123; if(arr[j]&lt;arr[minIndex])&#123; minIndex = j; &#125; &#125; console.log(minIndex);如果比了一圈下来,最小下标没变,那么就不需要交换位置。 if(minIndex!=i)&#123;一轮比完 选出最小值的下标。 var temp = arr[i]; arr[i] = arr[minIndex]; arr[minIndex] = temp; &#125; &#125; console.log(arr); 平均值arr 1234567var sum = 0 ;for(var i = 0 ; i &lt; arr.length ; i++)&#123; sum += arr[i];&#125;var rs = sum/arr.length;console.log(&apos;arr平均值为:&apos;+rs);","categories":[],"tags":[]},{"title":"2018-4-9","slug":"2018-4-2","date":"2018-04-09T07:13:51.000Z","updated":"2018-04-09T08:42:19.224Z","comments":true,"path":"2018/04/09/2018-4-2/","link":"","permalink":"http://yoursite.com/2018/04/09/2018-4-2/","excerpt":"","text":"4-2·js知识点总结对象12345var name = &apos;张三&apos;;var age = 20;var name2 = &apos;李四&apos;;var age2 = 30; 字面量形式表示对象。 通过对象获取属性。 日期对象 JavaScript帮我们封装了部分常用功能的对象，比如时间类、数学类等。 new可以创建一个对象的实例对象。 date变量就是Date的一个实例对象，可以通过date获取相应的方法。 注意！一般对象首字母都是大写。例： 12345678910var date = new Date();console.log(&quot;date===&gt;&quot;+date);console.log(&quot;getYear()===&gt;&quot;+date.getYear());console.log(&quot;年&quot;+date.getFullYear());console.log(&quot;月&quot;+date.getMonth());此处月份需要＋1，因为下标从0到11.console.log(&quot;日&quot;+date.getDate());console.log(&quot;时&quot;+date.getHours());console.log(&quot;分&quot;+date.getMinutes());console.log(&quot;秒&quot;+date.getSeconds()); 定时器 可以做一个每秒刷新一次的实时时间。 1234567891011setInterval(function()&#123;var date = new Date();var year = date.getFullYear();var month = date.getMonth();var day = date.getDay();var hour = date.getHours();var min = date.getMinutes();var sec = date.getSeconds();var rsStr = &apos;当前时间为：&apos;+ year + &apos;年&apos; + month + &apos;月&apos; + day + &apos;日&apos; + hour + &apos;时&apos; + min + &apos;分&apos; + sec + &apos;秒&apos;;document.write(rsStr+&apos;&lt;br&gt;&apos;);&#125;,1000)&#125;) 时间戳 时间戳是以秒为单位，常用于表示区分，类似于ID。 123var date = new Date();var longTime = date.getTime();console.log(&apos;当前时间戳为：&apos; +longTime); 数学对象 Math提供的是静态的方法，无需new. ceil是天花板函数，用于小数向上取整。 floor 是地板函数，用于小数向下取整。 12345var num1 = 1.3333;console.log(Math.ceil(num1));==============================var num2 = 1.9999;console.log(Math.floor(num2)); max/min最大值和最小值 12console.log(Math.max(1,7,2,28,10));console.log(Math.min(1,7,2,28,10)); random求随机数。 round是四舍五入但是对于float类型可能出现舍入误差，这是计算机的原理导致的 提醒： 对于敏感数据，高精度数据，金钱 不能使用round函数，如果真眼使用需要单独封装方法。 求任意范围的随机数。 12Math.floor(Math.random()*个数)+min例如：console.log(Math.floor(Math.random()*11)+5);是求5到15之间的随机数。 逻辑运算符 &amp;&amp;代表‘and’和‘且’。 ||代表‘or’和‘或者’。 小知识点 prompt()会返回输入结果。 if…else…语法. 如果只有一个条件 可以不写{}。或者说if()如果没有大括号，会默认执行后面第一句结果. 12if(1&gt;3)alert(&apos;你好！&apos;);alert(&apos;么么哒！&apos;);","categories":[],"tags":[]},{"title":"2018/3/30","slug":"2018-3-30","date":"2018-03-31T06:06:37.000Z","updated":"2018-03-31T06:15:30.125Z","comments":true,"path":"2018/03/31/2018-3-30/","link":"","permalink":"http://yoursite.com/2018/03/31/2018-3-30/","excerpt":"","text":"js的简单介绍日常用途 嵌入动态文本于HTML页面。 对浏览器事件作出响应。 读写html元素. 在数据被提交到服务器之前验证数据。 检测访客的浏览器信息。 控制cookies，包括创建和修改。 基于node.js技术进行服务器端编程。 特性 javascript是一种解释型脚本语言，是在程序运行过程中逐行解释。 是一种基于对象的脚本语言。 简单。 动态性。 跨平台性。 引入方式123《script type=\"texr/javascrtpt\"》 aler(\"xx\") &lt;script&gt; 返回boolean类型123456if(confirn(\"xx\"))&#123; alert('xx');&#125;else&#123; alert('xx');&#125; js的基本数据类型 number string boolean undefined null（js是弱类型，任何类型只需要采用var表示即可。) 在js语法中，空格不重要，但是要注意‘{’和‘;’。一般来说，‘{’是一条语句的开始或者结束。但是‘;’一定是一条语句的结束！ 一些简单的概要 console.log一般是在调试代码时使用。 prompt(‘x’)是一个可以获取用户信息的输入框。 ‘\\’是一个转义字符。 变量是由字母、数字和下划线组成，而且数字不能作为开头。 console.log(obj)对象 是用于存放一个物体的各种属性。 console.log(heighArr)数组是用于存放一类数据的集合。 null 一般在对象不存在的时候才出现。 typeof 是来帮我们判断数据类型的。 比较运算符包括： &gt; &lt; == != &gt;= &lt;= ##算数运算符 如果存在数字和字符串相加，结果字符串类型，而+会被认为是拼接的意思。 ‘-’会对数据类型进行“隐式转换”,如果存在数字和’字符串类型的数字’相减，结果是数字类型。 如果存在数字和数字类型字符串相减，结果是：NaN。属于“not a number缩写。 ” 在js中 一般 字符类型的数字会被隐式转换。在比较运算符中会被直接转换。 “===”是严格等于的意思。（1.先比较数据类型 2.再比较数值） 判断数值相等 “===” 最靠谱 ！","categories":[],"tags":[]}]}